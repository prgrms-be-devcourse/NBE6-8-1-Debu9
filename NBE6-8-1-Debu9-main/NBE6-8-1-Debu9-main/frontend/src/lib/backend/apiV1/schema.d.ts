/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/products/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 단건 조회 */
    get: operations["getItem"];
    /** 상품 수정 */
    put: operations["updateProduct"];
    post?: never;
    /** 상품 삭제 */
    delete: operations["delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{orderId}/items/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 수정 */
    put: operations["modify"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/products": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 다건 조회 */
    get: operations["getItems"];
    put?: never;
    /** 상품 추가 */
    post: operations["createProduct"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 주문 다건 조회 */
    get: operations["getItems_1"];
    put?: never;
    /** 주문 생성 */
    post: operations["write"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{orderNum}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 주문번호로 단건 조회 */
    get: operations["getItem_1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{orderId}/items": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 다건 조회 */
    get: operations["getItems_2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{orderId}/delivery-schedule": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 배송일정 조회 */
    get: operations["getDeliverySchedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 이메일로 주문 조회 */
    get: operations["getItemsByEmail"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/orders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 주문 삭제 */
    delete: operations["deleteOrder"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ProductReqBody: {
      name: string;
      imageUrl: string;
      info: string;
      /** Format: int32 */
      price: number;
      engName: string;
    };
    RsDataVoid: {
      resultCode?: string;
      msg?: string;
      data?: unknown;
    };
    OrderItemsModifyReqBody: {
      /** Format: int32 */
      count: number;
      /** Format: date-time */
      expectedDeliveryDate: string;
      deliveryState: string;
    };
    ProductDto: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      /** Format: date-time */
      modifyDate?: string;
      name?: string;
      engName?: string;
      /** Format: int32 */
      price?: number;
      info?: string;
      imageUrl?: string;
    };
    RsDataProductDto: {
      resultCode?: string;
      msg?: string;
      data?: components["schemas"]["ProductDto"];
    };
    OrderItemWriteReqBody: {
      /** Format: int32 */
      productId: number;
      /** Format: int32 */
      count: number;
    };
    OrderWriteReqBody: {
      email: string;
      address: string;
      items: components["schemas"]["OrderItemWriteReqBody"][];
    };
    OrderDto: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      /** Format: date-time */
      modifyDate?: string;
      /** Format: int32 */
      userId?: number;
      /** Format: int32 */
      orderNum?: number;
      address?: string;
    };
    RsDataOrderDto: {
      resultCode?: string;
      msg?: string;
      data?: components["schemas"]["OrderDto"];
    };
    OrderItemResponseDto: {
      /** Format: int32 */
      orderItem_id?: number;
      delivery_state?: string;
      product_name?: string;
      product_eng_name?: string;
      /** Format: int32 */
      price?: number;
      image_url?: string;
      /** Format: int32 */
      count?: number;
    };
    OrderResponseDto: {
      /** Format: int32 */
      order_id?: number;
      order_number?: string;
      /** Format: int32 */
      total_price?: number;
      order_address?: string;
      /** Format: int32 */
      total_count?: number;
      created_date?: string;
      email?: string;
      order_items?: components["schemas"]["OrderItemResponseDto"][];
    };
    OrderItemDto: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      /** Format: date-time */
      modifyDate?: string;
      /** Format: int32 */
      orderId?: number;
      /** Format: int32 */
      productId?: number;
      /** Format: int32 */
      count?: number;
      /** Format: date-time */
      expectedDeliveryDate?: string;
      deliveryState?: string;
      email?: string;
      address?: string;
    };

    RsDeliveryDto: {
      resultCode?: string;
      msg?: string;
      data: DeliveryDto;
    };

    DeliveryDto: {
      orderNum: number;
      email: string;
      address: string;
      expectedDeliveryDate: string;
      deliveryState: string;
    };

    RsDataListOrderItemDto: {
      resultCode?: string;
      msg?: string;
      data?: components["schemas"]["OrderItemDto"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getItem: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["ProductDto"];
        };
      };
    };
  };
  updateProduct: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductReqBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  modify: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        orderId: number;
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderItemsModifyReqBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getItems: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["ProductDto"][];
        };
      };
    };
  };
  createProduct: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductReqBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["RsDataProductDto"];
        };
      };
    };
  };
  getItems_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["OrderResponseDto"][];
        };
      };
    };
  };
  write: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderWriteReqBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["RsDataOrderDto"];
        };
      };
    };
  };
  getItem_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        orderNum: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["OrderDto"];
        };
      };
    };
  };
  getItems_2: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        orderId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["OrderItemDto"][];
        };
      };
    };
  };
  getDeliverySchedule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        orderId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["RsDataListOrderItemDto"];
        };
      };
    };
  };
  getItemsByEmail: {
    parameters: {
      query: {
        memberEmail: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": components["schemas"]["OrderResponseDto"][];
        };
      };
    };
  };
  deleteOrder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=UTF-8": string;
        };
      };
    };
  };
}
